"use strict"; var visitorsChart, devicesChart, audienceChart, locationChart, pageViewsChart, fetchError = jsLang("Error In Fetching Data"), startDate = moment().subtract(29, "days"), endDate = moment(); function device(a, b) { $(".device").find(".placeholder").removeClass("d-none"), $(".device").find("#devicesChart").addClass("d-none"), $(".device").find(".card-block h6").addClass("d-none"), $.ajax({ type: "GET", url: SITE_URL + "/device", dataType: "json", data: { startDate: a, endDate: b }, success: function (a) { return $(".device").find(".placeholder").addClass("d-none"), 200 == a.status ? 1 > Object.keys(a.device).length || 1 > a.device.length || 1 > a.device.level.length ? ($(".device").find(".card-block h6").removeClass("d-none").text(jsLang("No data available")), !1) : void ($(".device").find("#devicesChart").removeClass("d-none"), devicesChart && devicesChart.destroy(), devicesChart = new Chart(document.getElementById("devicesChart"), { type: "doughnut", data: { labels: a.device.level, datasets: [{ data: a.device.data, backgroundColor: ["rgb(255, 99, 132)", "rgb(54, 162, 235)", "rgb(75, 192, 192)"] }] }, options: { responsive: !0, maintainAspectRatio: !1, legend: { position: "right" } } })) : ($(".device").find(".card-block h6").removeClass("d-none").text(fetchError + ". " + a.error[0].message), !1) } }) } function audience(a, b) { $(".audience").find(".placeholder").removeClass("d-none"), $(".audience").find("#audienceChart").addClass("d-none"), $(".audience").find(".card-block h6").addClass("d-none"), $.ajax({ type: "GET", url: SITE_URL + "/audience", dataType: "json", data: { startDate: a, endDate: b }, success: function (a) { return $(".audience").find(".placeholder").addClass("d-none"), 200 == a.status ? void ($(".audience").find("#audienceChart").removeClass("d-none"), audienceChart && audienceChart.destroy(), audienceChart = new Chart(document.getElementById("audienceChart"), { type: "bar", data: { labels: ["New Users", "Returning Users"], datasets: [{ label: "Audience", data: a.audience, backgroundColor: ["rgb(54, 162, 235)", "rgb(255, 99, 132)"] }] }, options: { responsive: !0, maintainAspectRatio: !1, legend: { display: !1 } } })) : ($(".audience").find(".card-block h6").removeClass("d-none").text(fetchError + ". " + a.error[0].message), !1) } }) } function locations(a, b) { $(".location").find(".placeholder").removeClass("d-none"), $(".location").find("#locationChart").addClass("d-none"), $(".location").find(".card-block h6").addClass("d-none"), $.ajax({ type: "GET", url: SITE_URL + "/location", dataType: "json", data: { startDate: a, endDate: b }, success: function (a) { return $(".location").find(".placeholder").addClass("d-none"), 200 == a.status ? 1 > Object.keys(a.location).length || 1 > a.location.length || 1 > a.location.level.length ? ($(".location").find(".card-block h6").removeClass("d-none").text(jsLang("No data available")), !1) : void ($(".location").find("#locationChart").removeClass("d-none"), locationChart && locationChart.destroy(), locationChart = new Chart(document.getElementById("locationChart"), { type: "pie", data: { labels: a.location.level, datasets: [{ data: a.location.value, backgroundColor: getDynamicColors(a.location.level.length) }] }, options: { responsive: !0, maintainAspectRatio: !1, legend: { position: "right" } } })) : ($(".location").find(".card-block h6").removeClass("d-none").text(fetchError + ". " + a.error[0].message), !1) } }) } function pageView(a, b) { $(".pageView").find("#pageViewsChart").addClass("d-none"), $(".pageView").find(".placeholder").removeClass("d-none"), $(".pageView").find(".card-block h6").addClass("d-none"), $.ajax({ type: "GET", url: SITE_URL + "/page_view", dataType: "json", data: { startDate: a, endDate: b }, success: function (a) { return $(".pageView").find(".placeholder").addClass("d-none"), 200 == a.status ? void ($(".pageView").find("#pageViewsChart").removeClass("d-none"), pageViewsChart && pageViewsChart.destroy(), pageViewsChart = new Chart(document.getElementById("pageViewsChart"), { type: "line", data: { labels: a.pageView.level, datasets: [{ label: "Page Views", data: a.pageView.value, borderColor: "rgb(255, 99, 132)", backgroundColor: "rgba(255, 99, 132, 0.2)", fill: !0 }] }, options: { responsive: !0, maintainAspectRatio: !1, legend: { display: !1 } } })) : ($(".pageView").find(".card-block h6").removeClass("d-none").text(fetchError + ". " + a.error[0].message), !1) } }) } function visitor(a, b) { $(".visitor").find(".placeholder").removeClass("d-none"), $(".visitor").find("#visitorsChart").addClass("d-none"), $(".visitor").find(".card-block h6").addClass("d-none"), $.ajax({ type: "GET", url: SITE_URL + "/visitor", dataType: "json", data: { startDate: a, endDate: b }, success: function (a) { return $(".visitor").find(".placeholder").addClass("d-none"), 200 == a.status ? void ($(".visitor").find("#visitorsChart").removeClass("d-none"), visitorsChart && visitorsChart.destroy(), visitorsChart = new Chart(document.getElementById("visitorsChart"), { type: "line", data: { labels: a.visitor.level, datasets: [{ label: "Visitors", data: a.visitor.value, borderColor: "rgb(54, 162, 235)", backgroundColor: "rgba(54, 162, 235, 0.2)", fill: !0 }] }, options: { responsive: !0, maintainAspectRatio: !1, legend: { display: !1 } } })) : ($(".visitor").find(".card-block h6").removeClass("d-none").text(fetchError + ". " + a.error[0].message), !1) } }) } function activeUser() { $.ajax({ type: "GET", url: SITE_URL + "/active_user", dataType: "json", success: function (a) { if ($(".active-user").find(".placeholder").addClass("d-none"), 200 != a.status) { var b = "<span class=\"card-title f-16\">" + fetchError + ". " + a.error[0].message + "</span> "; return $(".active-user").find(".card-block").html(b), !1 } $(".active-user").find(".active-card").removeClass("d-none"), $("#active_user").text(a.activeUser[0].activeUsers || 0) } }) } $(document).ready(function () { device(startDate.format("YYYY-MM-DD"), endDate.format("YYYY-MM-DD")), audience(startDate.format("YYYY-MM-DD"), endDate.format("YYYY-MM-DD")), pageView(startDate.format("YYYY-MM-DD"), endDate.format("YYYY-MM-DD")), visitor(startDate.format("YYYY-MM-DD"), endDate.format("YYYY-MM-DD")), locations(startDate.format("YYYY-MM-DD"), endDate.format("YYYY-MM-DD")), activeUser(), $("#date-range-btn span").html("<i class=\"fa fa-calendar\"> </i> " + formatMomentDate(startDate) + " - " + formatMomentDate(endDate)) }); function getDynamicColors(a) { for (var b = [], c = 0; c < a; c++) { var d = c * (360 / a); b.push("hsl(" + d + ", 50%, 50%)") } return b } $("#date-range-btn").daterangepicker(dateConfig(startDate, endDate), function (a, b) { let c, d = a, e = b, f = !0; "undefined" == a || "undefined" == b ? c = jsLang("Pick a date range") : "" == a || "" == b || null ? c = jsLang("Any Time") : (c = formatMomentDate(a) + " - " + formatMomentDate(b), f = !1), !0 === f ? ($(d).val(""), $(e).val("")) : ($(d).val(formatMomentDate(a)), $(e).val(formatMomentDate(b))), $("#date-range-btn span").html("<i class=\"fa fa-calendar\"> </i> " + c), visitor(a.format("YYYY-MM-DD"), b.format("YYYY-MM-DD")), device(a.format("YYYY-MM-DD"), b.format("YYYY-MM-DD")), audience(a.format("YYYY-MM-DD"), b.format("YYYY-MM-DD")), pageView(a.format("YYYY-MM-DD"), b.format("YYYY-MM-DD")), locations(a.format("YYYY-MM-DD"), b.format("YYYY-MM-DD")) }); function dateConfig(a, b) { return { startDate: a, endDate: b, maxDate: new Date, ranges: { Today: [moment(), moment()], Yesterday: [moment().subtract(1, "days"), moment().subtract(1, "days")], "Last 7 Days": [moment().subtract(6, "days"), moment()], "Last 30 Days": [moment().subtract(29, "days"), moment()], "This Month": [moment().startOf("month"), moment().endOf("month")], "Last Month": [moment().subtract(1, "month").startOf("month"), moment().subtract(1, "month").endOf("month")] }, format: "YYYY-MM-DD" } }